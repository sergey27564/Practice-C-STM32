ARM GAS  /tmp/ccZVPRyK.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB146:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
ARM GAS  /tmp/ccZVPRyK.s 			page 2


  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* USER CODE END Header */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  42:Src/main.c    **** #include "main.h"
  43:Src/main.c    **** #include "usb_device.h"
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  46:Src/main.c    **** /* USER CODE BEGIN Includes */
  47:Src/main.c    **** #include "usbd_cdc_if.h"
  48:Src/main.c    **** /* USER CODE END Includes */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  51:Src/main.c    **** /* USER CODE BEGIN PTD */
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE END PTD */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  56:Src/main.c    **** /* USER CODE BEGIN PD */
  57:Src/main.c    **** /* USER CODE END PD */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  60:Src/main.c    **** /* USER CODE BEGIN PM */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END PM */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** 
  66:Src/main.c    **** TIM_HandleTypeDef htim2;
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE BEGIN PV */
  69:Src/main.c    **** /* USER CODE END PV */
  70:Src/main.c    **** 
  71:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  72:Src/main.c    **** void SystemClock_Config(void);
  73:Src/main.c    **** static void MX_GPIO_Init(void);
  74:Src/main.c    **** static void MX_TIM2_Init(void);
  75:Src/main.c    **** uint8_t crc8_check(uint8_t* Buf, uint32_t len);
  76:Src/main.c    **** uint8_t recive_msg(uint8_t* rec_data);
  77:Src/main.c    **** /* USER CODE BEGIN PFP */
  78:Src/main.c    **** /* USER CODE END PFP */
  79:Src/main.c    **** 
  80:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  81:Src/main.c    **** /* USER CODE BEGIN 0 */
  82:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  83:Src/main.c    **** {
  84:Src/main.c    ****   if (htim->Instance==TIM2)
  85:Src/main.c    ****   {
  86:Src/main.c    ****     HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  87:Src/main.c    ****   }
  88:Src/main.c    **** }
  89:Src/main.c    **** /* USER CODE END 0 */
ARM GAS  /tmp/ccZVPRyK.s 			page 3


  90:Src/main.c    **** 
  91:Src/main.c    **** /**
  92:Src/main.c    ****   * @brief  The application entry point.
  93:Src/main.c    ****   * @retval int
  94:Src/main.c    ****   */
  95:Src/main.c    **** int main(void)
  96:Src/main.c    **** {
  97:Src/main.c    ****   /* USER CODE BEGIN 1 */
  98:Src/main.c    ****   srand(100);
  99:Src/main.c    **** 
 100:Src/main.c    ****   uint8_t rec_crc8;
 101:Src/main.c    ****   uint8_t ans[] = {170, 85, 2, 0, 0};
 102:Src/main.c    ****   uint8_t ans_buf[] = {170, 85, 2, 0};
 103:Src/main.c    ****   /* USER CODE END 1 */
 104:Src/main.c    ****   
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 109:Src/main.c    ****   HAL_Init();
 110:Src/main.c    **** 
 111:Src/main.c    ****   /* USER CODE BEGIN Init */
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* USER CODE END Init */
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* Configure the system clock */
 116:Src/main.c    ****   SystemClock_Config();
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* USER CODE END SysInit */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* Initialize all configured peripherals */
 123:Src/main.c    ****   MX_GPIO_Init();
 124:Src/main.c    ****   MX_TIM2_Init();
 125:Src/main.c    ****   MX_USB_DEVICE_Init();
 126:Src/main.c    ****   /* USER CODE BEGIN 2 */
 127:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim2);
 128:Src/main.c    ****   /* USER CODE END 2 */
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* Infinite loop */
 131:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 132:Src/main.c    ****   while (1)
 133:Src/main.c    ****   {
 134:Src/main.c    ****     /* USER CODE END WHILE */
 135:Src/main.c    **** 
 136:Src/main.c    ****     /* USER CODE BEGIN 3 */
 137:Src/main.c    ****     if(rec_data[0] == 170 && rec_data[1] == 85)
 138:Src/main.c    ****     {
 139:Src/main.c    ****       for (int i=2; i<rec_data[2]; i++)
 140:Src/main.c    ****       {
 141:Src/main.c    ****         ans_buf[i] = rec_data[i];
 142:Src/main.c    ****       }
 143:Src/main.c    **** 
 144:Src/main.c    ****       rec_crc8 = crc8_check(&ans_buf, 3);
 145:Src/main.c    **** 
 146:Src/main.c    ****       if(rec_crc8 == rec_data[rec_data_size-1])
ARM GAS  /tmp/ccZVPRyK.s 			page 4


 147:Src/main.c    ****       {
 148:Src/main.c    ****         ans_buf[3] = recive_msg(&rec_data);
 149:Src/main.c    ****         ans[3] = ans_buf[3];
 150:Src/main.c    ****         ans[4] = crc8_check(&ans_buf, 3);
 151:Src/main.c    **** 
 152:Src/main.c    ****         CDC_Transmit_FS(&ans, 5);
 153:Src/main.c    ****       }
 154:Src/main.c    **** 
 155:Src/main.c    ****       memset(rec_data, 0, rec_data_size);
 156:Src/main.c    ****     }
 157:Src/main.c    ****   /* USER CODE END 3 */
 158:Src/main.c    ****   }
 159:Src/main.c    **** }
 160:Src/main.c    **** /**
 161:Src/main.c    ****   * @brief System Clock Configuration
 162:Src/main.c    ****   * @retval None
 163:Src/main.c    ****   */
 164:Src/main.c    **** void SystemClock_Config(void)
 165:Src/main.c    **** {
 166:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 167:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 168:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 169:Src/main.c    **** 
 170:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 171:Src/main.c    ****   */
 172:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 173:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 174:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 175:Src/main.c    ****   */
 176:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 177:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 178:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 179:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 180:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 25;
 181:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 432;
 182:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 183:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 184:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 185:Src/main.c    ****   {
 186:Src/main.c    ****     Error_Handler();
 187:Src/main.c    ****   }
 188:Src/main.c    ****   /** Activate the Over-Drive mode 
 189:Src/main.c    ****   */
 190:Src/main.c    ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 191:Src/main.c    ****   {
 192:Src/main.c    ****     Error_Handler();
 193:Src/main.c    ****   }
 194:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 195:Src/main.c    ****   */
 196:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 197:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 198:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 199:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 200:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 201:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 202:Src/main.c    **** 
 203:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
ARM GAS  /tmp/ccZVPRyK.s 			page 5


 204:Src/main.c    ****   {
 205:Src/main.c    ****     Error_Handler();
 206:Src/main.c    ****   }
 207:Src/main.c    ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 208:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 209:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 210:Src/main.c    ****   {
 211:Src/main.c    ****     Error_Handler();
 212:Src/main.c    ****   }
 213:Src/main.c    **** }
 214:Src/main.c    **** 
 215:Src/main.c    **** /**
 216:Src/main.c    ****   * @brief TIM2 Initialization Function
 217:Src/main.c    ****   * @param None
 218:Src/main.c    ****   * @retval None
 219:Src/main.c    ****   */
 220:Src/main.c    **** static void MX_TIM2_Init(void)
 221:Src/main.c    **** {
 222:Src/main.c    **** 
 223:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 224:Src/main.c    **** 
 225:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 226:Src/main.c    **** 
 227:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 228:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 229:Src/main.c    **** 
 230:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 231:Src/main.c    **** 
 232:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 233:Src/main.c    ****   htim2.Instance = TIM2;
 234:Src/main.c    ****   htim2.Init.Prescaler = 53999;
 235:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 236:Src/main.c    ****   htim2.Init.Period = 1999;
 237:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 238:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 239:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 240:Src/main.c    ****   {
 241:Src/main.c    ****     Error_Handler();
 242:Src/main.c    ****   }
 243:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 244:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 245:Src/main.c    ****   {
 246:Src/main.c    ****     Error_Handler();
 247:Src/main.c    ****   }
 248:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 249:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 250:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 251:Src/main.c    ****   {
 252:Src/main.c    ****     Error_Handler();
 253:Src/main.c    ****   }
 254:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 255:Src/main.c    **** 
 256:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 257:Src/main.c    **** 
 258:Src/main.c    **** }
 259:Src/main.c    **** 
 260:Src/main.c    **** /**
ARM GAS  /tmp/ccZVPRyK.s 			page 6


 261:Src/main.c    ****   * @brief GPIO Initialization Function
 262:Src/main.c    ****   * @param None
 263:Src/main.c    ****   * @retval None
 264:Src/main.c    ****   */
 265:Src/main.c    **** static void MX_GPIO_Init(void)
 266:Src/main.c    **** {
  27              		.loc 1 266 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 40
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 4, -24
  35              		.cfi_offset 5, -20
  36              		.cfi_offset 6, -16
  37              		.cfi_offset 7, -12
  38              		.cfi_offset 8, -8
  39              		.cfi_offset 14, -4
  40 0004 8AB0     		sub	sp, sp, #40
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 64
 267:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 267 0
  44 0006 0024     		movs	r4, #0
  45 0008 0594     		str	r4, [sp, #20]
  46 000a 0694     		str	r4, [sp, #24]
  47 000c 0794     		str	r4, [sp, #28]
  48 000e 0894     		str	r4, [sp, #32]
  49 0010 0994     		str	r4, [sp, #36]
  50              	.LBB2:
 268:Src/main.c    **** 
 269:Src/main.c    ****   /* GPIO Ports Clock Enable */
 270:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  51              		.loc 1 270 0
  52 0012 2F4B     		ldr	r3, .L3
  53 0014 1A6B     		ldr	r2, [r3, #48]
  54 0016 42F00102 		orr	r2, r2, #1
  55 001a 1A63     		str	r2, [r3, #48]
  56 001c 1A6B     		ldr	r2, [r3, #48]
  57 001e 02F00102 		and	r2, r2, #1
  58 0022 0092     		str	r2, [sp]
  59 0024 009A     		ldr	r2, [sp]
  60              	.LBE2:
  61              	.LBB3:
 271:Src/main.c    ****   __HAL_RCC_GPIOI_CLK_ENABLE();
  62              		.loc 1 271 0
  63 0026 1A6B     		ldr	r2, [r3, #48]
  64 0028 42F48072 		orr	r2, r2, #256
  65 002c 1A63     		str	r2, [r3, #48]
  66 002e 1A6B     		ldr	r2, [r3, #48]
  67 0030 02F48072 		and	r2, r2, #256
  68 0034 0192     		str	r2, [sp, #4]
  69 0036 019A     		ldr	r2, [sp, #4]
  70              	.LBE3:
  71              	.LBB4:
 272:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
ARM GAS  /tmp/ccZVPRyK.s 			page 7


  72              		.loc 1 272 0
  73 0038 1A6B     		ldr	r2, [r3, #48]
  74 003a 42F08002 		orr	r2, r2, #128
  75 003e 1A63     		str	r2, [r3, #48]
  76 0040 1A6B     		ldr	r2, [r3, #48]
  77 0042 02F08002 		and	r2, r2, #128
  78 0046 0292     		str	r2, [sp, #8]
  79 0048 029A     		ldr	r2, [sp, #8]
  80              	.LBE4:
  81              	.LBB5:
 273:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  82              		.loc 1 273 0
  83 004a 1A6B     		ldr	r2, [r3, #48]
  84 004c 42F00402 		orr	r2, r2, #4
  85 0050 1A63     		str	r2, [r3, #48]
  86 0052 1A6B     		ldr	r2, [r3, #48]
  87 0054 02F00402 		and	r2, r2, #4
  88 0058 0392     		str	r2, [sp, #12]
  89 005a 039A     		ldr	r2, [sp, #12]
  90              	.LBE5:
  91              	.LBB6:
 274:Src/main.c    ****   __HAL_RCC_GPIOG_CLK_ENABLE();
  92              		.loc 1 274 0
  93 005c 1A6B     		ldr	r2, [r3, #48]
  94 005e 42F04002 		orr	r2, r2, #64
  95 0062 1A63     		str	r2, [r3, #48]
  96 0064 1B6B     		ldr	r3, [r3, #48]
  97 0066 03F04003 		and	r3, r3, #64
  98 006a 0493     		str	r3, [sp, #16]
  99 006c 049B     		ldr	r3, [sp, #16]
 100              	.LBE6:
 275:Src/main.c    **** 
 276:Src/main.c    ****   /*Configure GPIO pin Output Level */
 277:Src/main.c    ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 101              		.loc 1 277 0
 102 006e 194F     		ldr	r7, .L3+4
 103 0070 2246     		mov	r2, r4
 104 0072 0221     		movs	r1, #2
 105 0074 3846     		mov	r0, r7
 106 0076 FFF7FEFF 		bl	HAL_GPIO_WritePin
 107              	.LVL0:
 278:Src/main.c    **** 
 279:Src/main.c    ****   /*Configure GPIO pin Output Level */
 280:Src/main.c    ****   HAL_GPIO_WritePin(ARD_D0_GPIO_Port, ARD_D0_Pin, GPIO_PIN_RESET);
 108              		.loc 1 280 0
 109 007a DFF86080 		ldr	r8, .L3+12
 110 007e 2246     		mov	r2, r4
 111 0080 8021     		movs	r1, #128
 112 0082 4046     		mov	r0, r8
 113 0084 FFF7FEFF 		bl	HAL_GPIO_WritePin
 114              	.LVL1:
 281:Src/main.c    **** 
 282:Src/main.c    ****   /*Configure GPIO pin Output Level */
 283:Src/main.c    ****   HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_RESET);
 115              		.loc 1 283 0
 116 0088 134E     		ldr	r6, .L3+8
 117 008a 2246     		mov	r2, r4
ARM GAS  /tmp/ccZVPRyK.s 			page 8


 118 008c 8021     		movs	r1, #128
 119 008e 3046     		mov	r0, r6
 120 0090 FFF7FEFF 		bl	HAL_GPIO_WritePin
 121              	.LVL2:
 284:Src/main.c    **** 
 285:Src/main.c    ****   /*Configure GPIO pin : LED_Pin */
 286:Src/main.c    ****   GPIO_InitStruct.Pin = LED_Pin;
 122              		.loc 1 286 0
 123 0094 0223     		movs	r3, #2
 124 0096 0593     		str	r3, [sp, #20]
 287:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 125              		.loc 1 287 0
 126 0098 0125     		movs	r5, #1
 127 009a 0695     		str	r5, [sp, #24]
 288:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 128              		.loc 1 288 0
 129 009c 0794     		str	r4, [sp, #28]
 289:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 130              		.loc 1 289 0
 131 009e 0894     		str	r4, [sp, #32]
 290:Src/main.c    ****   HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 132              		.loc 1 290 0
 133 00a0 05A9     		add	r1, sp, #20
 134 00a2 3846     		mov	r0, r7
 135 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 136              	.LVL3:
 291:Src/main.c    **** 
 292:Src/main.c    ****   /*Configure GPIO pin : ARD_D0_Pin */
 293:Src/main.c    ****   GPIO_InitStruct.Pin = ARD_D0_Pin;
 137              		.loc 1 293 0
 138 00a8 8027     		movs	r7, #128
 139 00aa 0597     		str	r7, [sp, #20]
 294:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 140              		.loc 1 294 0
 141 00ac 0695     		str	r5, [sp, #24]
 295:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 142              		.loc 1 295 0
 143 00ae 0794     		str	r4, [sp, #28]
 296:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 144              		.loc 1 296 0
 145 00b0 0894     		str	r4, [sp, #32]
 297:Src/main.c    ****   HAL_GPIO_Init(ARD_D0_GPIO_Port, &GPIO_InitStruct);
 146              		.loc 1 297 0
 147 00b2 05A9     		add	r1, sp, #20
 148 00b4 4046     		mov	r0, r8
 149 00b6 FFF7FEFF 		bl	HAL_GPIO_Init
 150              	.LVL4:
 298:Src/main.c    **** 
 299:Src/main.c    ****   /*Configure GPIO pin : ARD_D4_Pin */
 300:Src/main.c    ****   GPIO_InitStruct.Pin = ARD_D4_Pin;
 151              		.loc 1 300 0
 152 00ba 0597     		str	r7, [sp, #20]
 301:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 153              		.loc 1 301 0
 154 00bc 0695     		str	r5, [sp, #24]
 302:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 155              		.loc 1 302 0
ARM GAS  /tmp/ccZVPRyK.s 			page 9


 156 00be 0794     		str	r4, [sp, #28]
 303:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 157              		.loc 1 303 0
 158 00c0 0894     		str	r4, [sp, #32]
 304:Src/main.c    ****   HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 159              		.loc 1 304 0
 160 00c2 05A9     		add	r1, sp, #20
 161 00c4 3046     		mov	r0, r6
 162 00c6 FFF7FEFF 		bl	HAL_GPIO_Init
 163              	.LVL5:
 305:Src/main.c    **** 
 306:Src/main.c    **** }
 164              		.loc 1 306 0
 165 00ca 0AB0     		add	sp, sp, #40
 166              	.LCFI2:
 167              		.cfi_def_cfa_offset 24
 168              		@ sp needed
 169 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 170              	.L4:
 171              		.align	2
 172              	.L3:
 173 00d0 00380240 		.word	1073887232
 174 00d4 00200240 		.word	1073881088
 175 00d8 00180240 		.word	1073879040
 176 00dc 00080240 		.word	1073874944
 177              		.cfi_endproc
 178              	.LFE146:
 180              		.section	.text.MX_TIM2_Init,"ax",%progbits
 181              		.align	1
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 185              		.fpu fpv5-sp-d16
 187              	MX_TIM2_Init:
 188              	.LFB145:
 221:Src/main.c    **** 
 189              		.loc 1 221 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 32
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193 0000 30B5     		push	{r4, r5, lr}
 194              	.LCFI3:
 195              		.cfi_def_cfa_offset 12
 196              		.cfi_offset 4, -12
 197              		.cfi_offset 5, -8
 198              		.cfi_offset 14, -4
 199 0002 89B0     		sub	sp, sp, #36
 200              	.LCFI4:
 201              		.cfi_def_cfa_offset 48
 227:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 202              		.loc 1 227 0
 203 0004 0024     		movs	r4, #0
 204 0006 0494     		str	r4, [sp, #16]
 205 0008 0594     		str	r4, [sp, #20]
 206 000a 0694     		str	r4, [sp, #24]
 207 000c 0794     		str	r4, [sp, #28]
 228:Src/main.c    **** 
ARM GAS  /tmp/ccZVPRyK.s 			page 10


 208              		.loc 1 228 0
 209 000e 0194     		str	r4, [sp, #4]
 210 0010 0294     		str	r4, [sp, #8]
 211 0012 0394     		str	r4, [sp, #12]
 233:Src/main.c    ****   htim2.Init.Prescaler = 53999;
 212              		.loc 1 233 0
 213 0014 0F4D     		ldr	r5, .L7
 214 0016 4FF08043 		mov	r3, #1073741824
 215 001a 2B60     		str	r3, [r5]
 234:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 216              		.loc 1 234 0
 217 001c 4DF2EF23 		movw	r3, #53999
 218 0020 6B60     		str	r3, [r5, #4]
 235:Src/main.c    ****   htim2.Init.Period = 1999;
 219              		.loc 1 235 0
 220 0022 AC60     		str	r4, [r5, #8]
 236:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 221              		.loc 1 236 0
 222 0024 40F2CF73 		movw	r3, #1999
 223 0028 EB60     		str	r3, [r5, #12]
 237:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 224              		.loc 1 237 0
 225 002a 2C61     		str	r4, [r5, #16]
 238:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 226              		.loc 1 238 0
 227 002c AC61     		str	r4, [r5, #24]
 239:Src/main.c    ****   {
 228              		.loc 1 239 0
 229 002e 2846     		mov	r0, r5
 230 0030 FFF7FEFF 		bl	HAL_TIM_Base_Init
 231              	.LVL6:
 243:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 232              		.loc 1 243 0
 233 0034 4FF48053 		mov	r3, #4096
 234 0038 0493     		str	r3, [sp, #16]
 244:Src/main.c    ****   {
 235              		.loc 1 244 0
 236 003a 04A9     		add	r1, sp, #16
 237 003c 2846     		mov	r0, r5
 238 003e FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 239              	.LVL7:
 248:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 240              		.loc 1 248 0
 241 0042 0194     		str	r4, [sp, #4]
 249:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 242              		.loc 1 249 0
 243 0044 0394     		str	r4, [sp, #12]
 250:Src/main.c    ****   {
 244              		.loc 1 250 0
 245 0046 01A9     		add	r1, sp, #4
 246 0048 2846     		mov	r0, r5
 247 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 248              	.LVL8:
 258:Src/main.c    **** 
 249              		.loc 1 258 0
 250 004e 09B0     		add	sp, sp, #36
 251              	.LCFI5:
ARM GAS  /tmp/ccZVPRyK.s 			page 11


 252              		.cfi_def_cfa_offset 12
 253              		@ sp needed
 254 0050 30BD     		pop	{r4, r5, pc}
 255              	.L8:
 256 0052 00BF     		.align	2
 257              	.L7:
 258 0054 00000000 		.word	htim2
 259              		.cfi_endproc
 260              	.LFE145:
 262              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 263              		.align	1
 264              		.global	HAL_TIM_PeriodElapsedCallback
 265              		.syntax unified
 266              		.thumb
 267              		.thumb_func
 268              		.fpu fpv5-sp-d16
 270              	HAL_TIM_PeriodElapsedCallback:
 271              	.LFB142:
  83:Src/main.c    ****   if (htim->Instance==TIM2)
 272              		.loc 1 83 0
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 0
 275              		@ frame_needed = 0, uses_anonymous_args = 0
 276              	.LVL9:
 277 0000 08B5     		push	{r3, lr}
 278              	.LCFI6:
 279              		.cfi_def_cfa_offset 8
 280              		.cfi_offset 3, -8
 281              		.cfi_offset 14, -4
  84:Src/main.c    ****   {
 282              		.loc 1 84 0
 283 0002 0368     		ldr	r3, [r0]
 284 0004 B3F1804F 		cmp	r3, #1073741824
 285 0008 00D0     		beq	.L12
 286              	.LVL10:
 287              	.L9:
 288 000a 08BD     		pop	{r3, pc}
 289              	.LVL11:
 290              	.L12:
  86:Src/main.c    ****   }
 291              		.loc 1 86 0
 292 000c 0221     		movs	r1, #2
 293 000e 0248     		ldr	r0, .L13
 294              	.LVL12:
 295 0010 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 296              	.LVL13:
  88:Src/main.c    **** /* USER CODE END 0 */
 297              		.loc 1 88 0
 298 0014 F9E7     		b	.L9
 299              	.L14:
 300 0016 00BF     		.align	2
 301              	.L13:
 302 0018 00200240 		.word	1073881088
 303              		.cfi_endproc
 304              	.LFE142:
 306              		.section	.text.SystemClock_Config,"ax",%progbits
 307              		.align	1
ARM GAS  /tmp/ccZVPRyK.s 			page 12


 308              		.global	SystemClock_Config
 309              		.syntax unified
 310              		.thumb
 311              		.thumb_func
 312              		.fpu fpv5-sp-d16
 314              	SystemClock_Config:
 315              	.LFB144:
 165:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 316              		.loc 1 165 0
 317              		.cfi_startproc
 318              		@ args = 0, pretend = 0, frame = 208
 319              		@ frame_needed = 0, uses_anonymous_args = 0
 320 0000 30B5     		push	{r4, r5, lr}
 321              	.LCFI7:
 322              		.cfi_def_cfa_offset 12
 323              		.cfi_offset 4, -12
 324              		.cfi_offset 5, -8
 325              		.cfi_offset 14, -4
 326 0002 B5B0     		sub	sp, sp, #212
 327              	.LCFI8:
 328              		.cfi_def_cfa_offset 224
 166:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 329              		.loc 1 166 0
 330 0004 3022     		movs	r2, #48
 331 0006 0021     		movs	r1, #0
 332 0008 28A8     		add	r0, sp, #160
 333 000a FFF7FEFF 		bl	memset
 334              	.LVL14:
 167:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 335              		.loc 1 167 0
 336 000e 0024     		movs	r4, #0
 337 0010 2394     		str	r4, [sp, #140]
 338 0012 2494     		str	r4, [sp, #144]
 339 0014 2594     		str	r4, [sp, #148]
 340 0016 2694     		str	r4, [sp, #152]
 341 0018 2794     		str	r4, [sp, #156]
 168:Src/main.c    **** 
 342              		.loc 1 168 0
 343 001a 8422     		movs	r2, #132
 344 001c 2146     		mov	r1, r4
 345 001e 02A8     		add	r0, sp, #8
 346 0020 FFF7FEFF 		bl	memset
 347              	.LVL15:
 348              	.LBB7:
 172:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 349              		.loc 1 172 0
 350 0024 204B     		ldr	r3, .L17
 351 0026 1A6C     		ldr	r2, [r3, #64]
 352 0028 42F08052 		orr	r2, r2, #268435456
 353 002c 1A64     		str	r2, [r3, #64]
 354 002e 1B6C     		ldr	r3, [r3, #64]
 355 0030 03F08053 		and	r3, r3, #268435456
 356 0034 0093     		str	r3, [sp]
 357 0036 009B     		ldr	r3, [sp]
 358              	.LBE7:
 359              	.LBB8:
 173:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
ARM GAS  /tmp/ccZVPRyK.s 			page 13


 360              		.loc 1 173 0
 361 0038 1C4B     		ldr	r3, .L17+4
 362 003a 1A68     		ldr	r2, [r3]
 363 003c 42F44042 		orr	r2, r2, #49152
 364 0040 1A60     		str	r2, [r3]
 365 0042 1B68     		ldr	r3, [r3]
 366 0044 03F44043 		and	r3, r3, #49152
 367 0048 0193     		str	r3, [sp, #4]
 368 004a 019B     		ldr	r3, [sp, #4]
 369              	.LBE8:
 176:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 370              		.loc 1 176 0
 371 004c 0123     		movs	r3, #1
 372 004e 2893     		str	r3, [sp, #160]
 177:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 373              		.loc 1 177 0
 374 0050 4FF48033 		mov	r3, #65536
 375 0054 2993     		str	r3, [sp, #164]
 178:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 376              		.loc 1 178 0
 377 0056 0225     		movs	r5, #2
 378 0058 2E95     		str	r5, [sp, #184]
 179:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 25;
 379              		.loc 1 179 0
 380 005a 4FF48003 		mov	r3, #4194304
 381 005e 2F93     		str	r3, [sp, #188]
 180:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 432;
 382              		.loc 1 180 0
 383 0060 1923     		movs	r3, #25
 384 0062 3093     		str	r3, [sp, #192]
 181:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 385              		.loc 1 181 0
 386 0064 4FF4D873 		mov	r3, #432
 387 0068 3193     		str	r3, [sp, #196]
 182:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 388              		.loc 1 182 0
 389 006a 3295     		str	r5, [sp, #200]
 183:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 390              		.loc 1 183 0
 391 006c 0923     		movs	r3, #9
 392 006e 3393     		str	r3, [sp, #204]
 184:Src/main.c    ****   {
 393              		.loc 1 184 0
 394 0070 28A8     		add	r0, sp, #160
 395 0072 FFF7FEFF 		bl	HAL_RCC_OscConfig
 396              	.LVL16:
 190:Src/main.c    ****   {
 397              		.loc 1 190 0
 398 0076 FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 399              	.LVL17:
 196:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 400              		.loc 1 196 0
 401 007a 0F23     		movs	r3, #15
 402 007c 2393     		str	r3, [sp, #140]
 198:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 403              		.loc 1 198 0
 404 007e 2495     		str	r5, [sp, #144]
ARM GAS  /tmp/ccZVPRyK.s 			page 14


 199:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 405              		.loc 1 199 0
 406 0080 2594     		str	r4, [sp, #148]
 200:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 407              		.loc 1 200 0
 408 0082 4FF4A053 		mov	r3, #5120
 409 0086 2693     		str	r3, [sp, #152]
 201:Src/main.c    **** 
 410              		.loc 1 201 0
 411 0088 4FF48053 		mov	r3, #4096
 412 008c 2793     		str	r3, [sp, #156]
 203:Src/main.c    ****   {
 413              		.loc 1 203 0
 414 008e 0721     		movs	r1, #7
 415 0090 23A8     		add	r0, sp, #140
 416 0092 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 417              	.LVL18:
 207:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 418              		.loc 1 207 0
 419 0096 4FF40013 		mov	r3, #2097152
 420 009a 0293     		str	r3, [sp, #8]
 208:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 421              		.loc 1 208 0
 422 009c 2194     		str	r4, [sp, #132]
 209:Src/main.c    ****   {
 423              		.loc 1 209 0
 424 009e 02A8     		add	r0, sp, #8
 425 00a0 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 426              	.LVL19:
 213:Src/main.c    **** 
 427              		.loc 1 213 0
 428 00a4 35B0     		add	sp, sp, #212
 429              	.LCFI9:
 430              		.cfi_def_cfa_offset 12
 431              		@ sp needed
 432 00a6 30BD     		pop	{r4, r5, pc}
 433              	.L18:
 434              		.align	2
 435              	.L17:
 436 00a8 00380240 		.word	1073887232
 437 00ac 00700040 		.word	1073770496
 438              		.cfi_endproc
 439              	.LFE144:
 441              		.section	.text.crc8_check,"ax",%progbits
 442              		.align	1
 443              		.global	crc8_check
 444              		.syntax unified
 445              		.thumb
 446              		.thumb_func
 447              		.fpu fpv5-sp-d16
 449              	crc8_check:
 450              	.LFB147:
 307:Src/main.c    **** 
 308:Src/main.c    **** /* USER CODE BEGIN 4 */
 309:Src/main.c    **** uint8_t crc8_check(uint8_t* Buf, uint32_t len)
 310:Src/main.c    **** {
 451              		.loc 1 310 0
ARM GAS  /tmp/ccZVPRyK.s 			page 15


 452              		.cfi_startproc
 453              		@ args = 0, pretend = 0, frame = 256
 454              		@ frame_needed = 0, uses_anonymous_args = 0
 455              	.LVL20:
 456 0000 30B5     		push	{r4, r5, lr}
 457              	.LCFI10:
 458              		.cfi_def_cfa_offset 12
 459              		.cfi_offset 4, -12
 460              		.cfi_offset 5, -8
 461              		.cfi_offset 14, -4
 462 0002 C1B0     		sub	sp, sp, #260
 463              	.LCFI11:
 464              		.cfi_def_cfa_offset 272
 465 0004 0546     		mov	r5, r0
 466 0006 0C46     		mov	r4, r1
 467              	.LVL21:
 311:Src/main.c    ****   uint8_t crc = 0xFF;
 312:Src/main.c    ****   uint8_t CRC8Table[] = {
 468              		.loc 1 312 0
 469 0008 4FF48072 		mov	r2, #256
 470 000c 0849     		ldr	r1, .L23
 471              	.LVL22:
 472 000e 6846     		mov	r0, sp
 473              	.LVL23:
 474 0010 FFF7FEFF 		bl	memcpy
 475              	.LVL24:
 311:Src/main.c    ****   uint8_t crc = 0xFF;
 476              		.loc 1 311 0
 477 0014 FF20     		movs	r0, #255
 313:Src/main.c    ****     0x00, 0x5E, 0xBC, 0xE2, 0x61, 0x3F, 0xDD, 0x83,
 314:Src/main.c    ****     0xC2, 0x9C, 0x7E, 0x20, 0xA3, 0xFD, 0x1F, 0x41,
 315:Src/main.c    ****     0x9D, 0xC3, 0x21, 0x7F, 0xFC, 0xA2, 0x40, 0x1E,
 316:Src/main.c    ****     0x5F, 0x01, 0xE3, 0xBD, 0x3E, 0x60, 0x82, 0xDC,
 317:Src/main.c    ****     0x23, 0x7D, 0x9F, 0xC1, 0x42, 0x1C, 0xFE, 0xA0,
 318:Src/main.c    ****     0xE1, 0xBF, 0x5D, 0x03, 0x80, 0xDE, 0x3C, 0x62,
 319:Src/main.c    ****     0xBE, 0xE0, 0x02, 0x5C, 0xDF, 0x81, 0x63, 0x3D,
 320:Src/main.c    ****     0x7C, 0x22, 0xC0, 0x9E, 0x1D, 0x43, 0xA1, 0xFF,
 321:Src/main.c    ****     0x46, 0x18, 0xFA, 0xA4, 0x27, 0x79, 0x9B, 0xC5,
 322:Src/main.c    ****     0x84, 0xDA, 0x38, 0x66, 0xE5, 0xBB, 0x59, 0x07,
 323:Src/main.c    ****     0xDB, 0x85, 0x67, 0x39, 0xBA, 0xE4, 0x06, 0x58,
 324:Src/main.c    ****     0x19, 0x47, 0xA5, 0xFB, 0x78, 0x26, 0xC4, 0x9A,
 325:Src/main.c    ****     0x65, 0x3B, 0xD9, 0x87, 0x04, 0x5A, 0xB8, 0xE6,
 326:Src/main.c    ****     0xA7, 0xF9, 0x1B, 0x45, 0xC6, 0x98, 0x7A, 0x24,
 327:Src/main.c    ****     0xF8, 0xA6, 0x44, 0x1A, 0x99, 0xC7, 0x25, 0x7B,
 328:Src/main.c    ****     0x3A, 0x64, 0x86, 0xD8, 0x5B, 0x05, 0xE7, 0xB9,
 329:Src/main.c    ****     0x8C, 0xD2, 0x30, 0x6E, 0xED, 0xB3, 0x51, 0x0F,
 330:Src/main.c    ****     0x4E, 0x10, 0xF2, 0xAC, 0x2F, 0x71, 0x93, 0xCD,
 331:Src/main.c    ****     0x11, 0x4F, 0xAD, 0xF3, 0x70, 0x2E, 0xCC, 0x92,
 332:Src/main.c    ****     0xD3, 0x8D, 0x6F, 0x31, 0xB2, 0xEC, 0x0E, 0x50,
 333:Src/main.c    ****     0xAF, 0xF1, 0x13, 0x4D, 0xCE, 0x90, 0x72, 0x2C,
 334:Src/main.c    ****     0x6D, 0x33, 0xD1, 0x8F, 0x0C, 0x52, 0xB0, 0xEE,
 335:Src/main.c    ****     0x32, 0x6C, 0x8E, 0xD0, 0x53, 0x0D, 0xEF, 0xB1,
 336:Src/main.c    ****     0xF0, 0xAE, 0x4C, 0x12, 0x91, 0xCF, 0x2D, 0x73,
 337:Src/main.c    ****     0xCA, 0x94, 0x76, 0x28, 0xAB, 0xF5, 0x17, 0x49,
 338:Src/main.c    ****     0x08, 0x56, 0xB4, 0xEA, 0x69, 0x37, 0xD5, 0x8B,
 339:Src/main.c    ****     0x57, 0x09, 0xEB, 0xB5, 0x36, 0x68, 0x8A, 0xD4,
 340:Src/main.c    ****     0x95, 0xCB, 0x29, 0x77, 0xF4, 0xAA, 0x48, 0x16,
ARM GAS  /tmp/ccZVPRyK.s 			page 16


 341:Src/main.c    ****     0xE9, 0xB7, 0x55, 0x0B, 0x88, 0xD6, 0x34, 0x6A,
 342:Src/main.c    ****     0x2B, 0x75, 0x97, 0xC9, 0x4A, 0x14, 0xF6, 0xA8,
 343:Src/main.c    ****     0x74, 0x2A, 0xC8, 0x96, 0x15, 0x4B, 0xA9, 0xF7,
 344:Src/main.c    ****     0xB6, 0xE8, 0x0A, 0x54, 0xD7, 0x89, 0x6B, 0x35
 345:Src/main.c    ****   };
 346:Src/main.c    **** 
 347:Src/main.c    ****   while (len--)
 478              		.loc 1 347 0
 479 0016 05E0     		b	.L20
 480              	.LVL25:
 481              	.L21:
 348:Src/main.c    ****     crc = CRC8Table[crc ^ *Buf++];
 482              		.loc 1 348 0
 483 0018 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 484 001a 5040     		eors	r0, r0, r2
 485              	.LVL26:
 486 001c 1DF80000 		ldrb	r0, [sp, r0]	@ zero_extendqisi2
 487              	.LVL27:
 347:Src/main.c    ****     crc = CRC8Table[crc ^ *Buf++];
 488              		.loc 1 347 0
 489 0020 1C46     		mov	r4, r3
 490              		.loc 1 348 0
 491 0022 0135     		adds	r5, r5, #1
 492              	.LVL28:
 493              	.L20:
 347:Src/main.c    ****     crc = CRC8Table[crc ^ *Buf++];
 494              		.loc 1 347 0
 495 0024 631E     		subs	r3, r4, #1
 496              	.LVL29:
 497 0026 002C     		cmp	r4, #0
 498 0028 F6D1     		bne	.L21
 349:Src/main.c    **** 
 350:Src/main.c    ****   return crc;
 351:Src/main.c    **** }
 499              		.loc 1 351 0
 500 002a 41B0     		add	sp, sp, #260
 501              	.LCFI12:
 502              		.cfi_def_cfa_offset 12
 503              		@ sp needed
 504 002c 30BD     		pop	{r4, r5, pc}
 505              	.LVL30:
 506              	.L24:
 507 002e 00BF     		.align	2
 508              	.L23:
 509 0030 00000000 		.word	.LANCHOR0
 510              		.cfi_endproc
 511              	.LFE147:
 513              		.section	.text.recive_msg,"ax",%progbits
 514              		.align	1
 515              		.global	recive_msg
 516              		.syntax unified
 517              		.thumb
 518              		.thumb_func
 519              		.fpu fpv5-sp-d16
 521              	recive_msg:
 522              	.LFB148:
 352:Src/main.c    **** 
ARM GAS  /tmp/ccZVPRyK.s 			page 17


 353:Src/main.c    **** uint8_t recive_msg(uint8_t* rec_data)
 354:Src/main.c    **** {
 523              		.loc 1 354 0
 524              		.cfi_startproc
 525              		@ args = 0, pretend = 0, frame = 0
 526              		@ frame_needed = 0, uses_anonymous_args = 0
 527              	.LVL31:
 528 0000 38B5     		push	{r3, r4, r5, lr}
 529              	.LCFI13:
 530              		.cfi_def_cfa_offset 16
 531              		.cfi_offset 3, -16
 532              		.cfi_offset 4, -12
 533              		.cfi_offset 5, -8
 534              		.cfi_offset 14, -4
 355:Src/main.c    **** 
 356:Src/main.c    ****   if (rec_data[2] == 1)
 535              		.loc 1 356 0
 536 0002 8478     		ldrb	r4, [r0, #2]	@ zero_extendqisi2
 537 0004 012C     		cmp	r4, #1
 538 0006 06D0     		beq	.L33
 357:Src/main.c    ****   {
 358:Src/main.c    ****     if (rec_data[3] == 1)
 359:Src/main.c    ****     {
 360:Src/main.c    ****       HAL_GPIO_WritePin(ARD_D0_GPIO_Port, ARD_D0_Pin, SET);
 361:Src/main.c    ****       return 1;
 362:Src/main.c    ****     }
 363:Src/main.c    ****     else
 364:Src/main.c    ****       if (rec_data[3] == 0)
 365:Src/main.c    ****       {
 366:Src/main.c    ****         HAL_GPIO_WritePin(ARD_D0_GPIO_Port, ARD_D0_Pin, RESET);
 367:Src/main.c    ****         return 1;
 368:Src/main.c    ****       }
 369:Src/main.c    ****   }
 370:Src/main.c    ****   else if (rec_data[2] == 2)
 539              		.loc 1 370 0
 540 0008 022C     		cmp	r4, #2
 541 000a 16D0     		beq	.L34
 542              	.L29:
 371:Src/main.c    ****   {
 372:Src/main.c    ****     if (rec_data[3] == 1)
 373:Src/main.c    ****     {
 374:Src/main.c    ****       HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, SET);
 375:Src/main.c    ****       return 1;
 376:Src/main.c    ****     }
 377:Src/main.c    ****     else
 378:Src/main.c    ****       if (rec_data[3] == 0)
 379:Src/main.c    ****       {
 380:Src/main.c    ****         HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, RESET);
 381:Src/main.c    ****         return 1;
 382:Src/main.c    ****       }
 383:Src/main.c    ****   }
 384:Src/main.c    ****   if (rec_data[2] == 3)
 543              		.loc 1 384 0
 544 000c 032C     		cmp	r4, #3
 545 000e 27D0     		beq	.L35
 385:Src/main.c    ****   {
 386:Src/main.c    ****     return rand() % 100;
ARM GAS  /tmp/ccZVPRyK.s 			page 18


 387:Src/main.c    ****   }
 388:Src/main.c    ****   return 0;
 546              		.loc 1 388 0
 547 0010 0024     		movs	r4, #0
 548              	.LVL32:
 549              	.L28:
 389:Src/main.c    **** }
 550              		.loc 1 389 0
 551 0012 2046     		mov	r0, r4
 552 0014 38BD     		pop	{r3, r4, r5, pc}
 553              	.LVL33:
 554              	.L33:
 358:Src/main.c    ****     {
 555              		.loc 1 358 0
 556 0016 C578     		ldrb	r5, [r0, #3]	@ zero_extendqisi2
 557 0018 012D     		cmp	r5, #1
 558 001a 07D0     		beq	.L36
 364:Src/main.c    ****       {
 559              		.loc 1 364 0
 560 001c 002D     		cmp	r5, #0
 561 001e F5D1     		bne	.L29
 366:Src/main.c    ****         return 1;
 562              		.loc 1 366 0
 563 0020 0022     		movs	r2, #0
 564 0022 8021     		movs	r1, #128
 565 0024 1548     		ldr	r0, .L38
 566              	.LVL34:
 567 0026 FFF7FEFF 		bl	HAL_GPIO_WritePin
 568              	.LVL35:
 367:Src/main.c    ****       }
 569              		.loc 1 367 0
 570 002a F2E7     		b	.L28
 571              	.LVL36:
 572              	.L36:
 360:Src/main.c    ****       return 1;
 573              		.loc 1 360 0
 574 002c 0122     		movs	r2, #1
 575 002e 8021     		movs	r1, #128
 576 0030 1248     		ldr	r0, .L38
 577              	.LVL37:
 578 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
 579              	.LVL38:
 361:Src/main.c    ****     }
 580              		.loc 1 361 0
 581 0036 2C46     		mov	r4, r5
 582 0038 EBE7     		b	.L28
 583              	.LVL39:
 584              	.L34:
 372:Src/main.c    ****     {
 585              		.loc 1 372 0
 586 003a C578     		ldrb	r5, [r0, #3]	@ zero_extendqisi2
 587 003c 012D     		cmp	r5, #1
 588 003e 08D0     		beq	.L37
 378:Src/main.c    ****       {
 589              		.loc 1 378 0
 590 0040 002D     		cmp	r5, #0
 591 0042 E3D1     		bne	.L29
ARM GAS  /tmp/ccZVPRyK.s 			page 19


 380:Src/main.c    ****         return 1;
 592              		.loc 1 380 0
 593 0044 0022     		movs	r2, #0
 594 0046 8021     		movs	r1, #128
 595 0048 0D48     		ldr	r0, .L38+4
 596              	.LVL40:
 597 004a FFF7FEFF 		bl	HAL_GPIO_WritePin
 598              	.LVL41:
 381:Src/main.c    ****       }
 599              		.loc 1 381 0
 600 004e 0124     		movs	r4, #1
 601 0050 DFE7     		b	.L28
 602              	.LVL42:
 603              	.L37:
 374:Src/main.c    ****       return 1;
 604              		.loc 1 374 0
 605 0052 0122     		movs	r2, #1
 606 0054 8021     		movs	r1, #128
 607 0056 0A48     		ldr	r0, .L38+4
 608              	.LVL43:
 609 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 610              	.LVL44:
 375:Src/main.c    ****     }
 611              		.loc 1 375 0
 612 005c 2C46     		mov	r4, r5
 613 005e D8E7     		b	.L28
 614              	.LVL45:
 615              	.L35:
 386:Src/main.c    ****   }
 616              		.loc 1 386 0
 617 0060 FFF7FEFF 		bl	rand
 618              	.LVL46:
 619 0064 074B     		ldr	r3, .L38+8
 620 0066 83FB0023 		smull	r2, r3, r3, r0
 621 006a C417     		asrs	r4, r0, #31
 622 006c C4EB6314 		rsb	r4, r4, r3, asr #5
 623 0070 6423     		movs	r3, #100
 624 0072 03FB1404 		mls	r4, r3, r4, r0
 625 0076 E4B2     		uxtb	r4, r4
 626 0078 CBE7     		b	.L28
 627              	.L39:
 628 007a 00BF     		.align	2
 629              	.L38:
 630 007c 00080240 		.word	1073874944
 631 0080 00180240 		.word	1073879040
 632 0084 1F85EB51 		.word	1374389535
 633              		.cfi_endproc
 634              	.LFE148:
 636              		.section	.text.main,"ax",%progbits
 637              		.align	1
 638              		.global	main
 639              		.syntax unified
 640              		.thumb
 641              		.thumb_func
 642              		.fpu fpv5-sp-d16
 644              	main:
 645              	.LFB143:
ARM GAS  /tmp/ccZVPRyK.s 			page 20


  96:Src/main.c    ****   /* USER CODE BEGIN 1 */
 646              		.loc 1 96 0
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 16
 649              		@ frame_needed = 0, uses_anonymous_args = 0
 650 0000 00B5     		push	{lr}
 651              	.LCFI14:
 652              		.cfi_def_cfa_offset 4
 653              		.cfi_offset 14, -4
 654 0002 85B0     		sub	sp, sp, #20
 655              	.LCFI15:
 656              		.cfi_def_cfa_offset 24
  98:Src/main.c    **** 
 657              		.loc 1 98 0
 658 0004 6420     		movs	r0, #100
 659 0006 FFF7FEFF 		bl	srand
 660              	.LVL47:
 101:Src/main.c    ****   uint8_t ans_buf[] = {170, 85, 2, 0};
 661              		.loc 1 101 0
 662 000a 284B     		ldr	r3, .L50
 663 000c 03F58072 		add	r2, r3, #256
 664 0010 92E80300 		ldm	r2, {r0, r1}
 665 0014 0290     		str	r0, [sp, #8]
 666 0016 8DF80C10 		strb	r1, [sp, #12]
 102:Src/main.c    ****   /* USER CODE END 1 */
 667              		.loc 1 102 0
 668 001a D3F80831 		ldr	r3, [r3, #264]
 669 001e 0193     		str	r3, [sp, #4]
 109:Src/main.c    **** 
 670              		.loc 1 109 0
 671 0020 FFF7FEFF 		bl	HAL_Init
 672              	.LVL48:
 116:Src/main.c    **** 
 673              		.loc 1 116 0
 674 0024 FFF7FEFF 		bl	SystemClock_Config
 675              	.LVL49:
 123:Src/main.c    ****   MX_TIM2_Init();
 676              		.loc 1 123 0
 677 0028 FFF7FEFF 		bl	MX_GPIO_Init
 678              	.LVL50:
 124:Src/main.c    ****   MX_USB_DEVICE_Init();
 679              		.loc 1 124 0
 680 002c FFF7FEFF 		bl	MX_TIM2_Init
 681              	.LVL51:
 125:Src/main.c    ****   /* USER CODE BEGIN 2 */
 682              		.loc 1 125 0
 683 0030 FFF7FEFF 		bl	MX_USB_DEVICE_Init
 684              	.LVL52:
 127:Src/main.c    ****   /* USER CODE END 2 */
 685              		.loc 1 127 0
 686 0034 1E48     		ldr	r0, .L50+4
 687 0036 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 688              	.LVL53:
 689 003a 1BE0     		b	.L41
 690              	.LVL54:
 691              	.L44:
 692              	.LBB9:
ARM GAS  /tmp/ccZVPRyK.s 			page 21


 141:Src/main.c    ****       }
 693              		.loc 1 141 0 discriminator 3
 694 003c 1D4A     		ldr	r2, .L50+8
 695 003e D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 696 0040 04AA     		add	r2, sp, #16
 697 0042 1A44     		add	r2, r2, r3
 698 0044 02F80C1C 		strb	r1, [r2, #-12]
 139:Src/main.c    ****       {
 699              		.loc 1 139 0 discriminator 3
 700 0048 0133     		adds	r3, r3, #1
 701              	.LVL55:
 702              	.L42:
 139:Src/main.c    ****       {
 703              		.loc 1 139 0 is_stmt 0 discriminator 1
 704 004a 1A4A     		ldr	r2, .L50+8
 705 004c 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 706 004e 9342     		cmp	r3, r2
 707 0050 F4DB     		blt	.L44
 708              	.LBE9:
 144:Src/main.c    **** 
 709              		.loc 1 144 0 is_stmt 1
 710 0052 0321     		movs	r1, #3
 711 0054 01A8     		add	r0, sp, #4
 712 0056 FFF7FEFF 		bl	crc8_check
 713              	.LVL56:
 146:Src/main.c    ****       {
 714              		.loc 1 146 0
 715 005a 174B     		ldr	r3, .L50+12
 716 005c 1B68     		ldr	r3, [r3]
 717 005e 013B     		subs	r3, r3, #1
 718 0060 144A     		ldr	r2, .L50+8
 719 0062 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 720 0064 9842     		cmp	r0, r3
 721 0066 0FD0     		beq	.L49
 722              	.LVL57:
 723              	.L45:
 155:Src/main.c    ****     }
 724              		.loc 1 155 0
 725 0068 134B     		ldr	r3, .L50+12
 726 006a 1A68     		ldr	r2, [r3]
 727 006c 0021     		movs	r1, #0
 728 006e 1148     		ldr	r0, .L50+8
 729 0070 FFF7FEFF 		bl	memset
 730              	.LVL58:
 731              	.L41:
 137:Src/main.c    ****     {
 732              		.loc 1 137 0
 733 0074 0F4B     		ldr	r3, .L50+8
 734 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 735 0078 AA2B     		cmp	r3, #170
 736 007a FBD1     		bne	.L41
 137:Src/main.c    ****     {
 737              		.loc 1 137 0 is_stmt 0 discriminator 1
 738 007c 0D4B     		ldr	r3, .L50+8
 739 007e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 740 0080 552B     		cmp	r3, #85
 741 0082 F7D1     		bne	.L41
ARM GAS  /tmp/ccZVPRyK.s 			page 22


 742 0084 0223     		movs	r3, #2
 743 0086 E0E7     		b	.L42
 744              	.LVL59:
 745              	.L49:
 148:Src/main.c    ****         ans[3] = ans_buf[3];
 746              		.loc 1 148 0 is_stmt 1
 747 0088 1046     		mov	r0, r2
 748              	.LVL60:
 749 008a FFF7FEFF 		bl	recive_msg
 750              	.LVL61:
 751 008e 8DF80700 		strb	r0, [sp, #7]
 149:Src/main.c    ****         ans[4] = crc8_check(&ans_buf, 3);
 752              		.loc 1 149 0
 753 0092 8DF80B00 		strb	r0, [sp, #11]
 150:Src/main.c    **** 
 754              		.loc 1 150 0
 755 0096 0321     		movs	r1, #3
 756 0098 01A8     		add	r0, sp, #4
 757 009a FFF7FEFF 		bl	crc8_check
 758              	.LVL62:
 759 009e 8DF80C00 		strb	r0, [sp, #12]
 152:Src/main.c    ****       }
 760              		.loc 1 152 0
 761 00a2 0521     		movs	r1, #5
 762 00a4 02A8     		add	r0, sp, #8
 763 00a6 FFF7FEFF 		bl	CDC_Transmit_FS
 764              	.LVL63:
 765 00aa DDE7     		b	.L45
 766              	.L51:
 767              		.align	2
 768              	.L50:
 769 00ac 00000000 		.word	.LANCHOR0
 770 00b0 00000000 		.word	htim2
 771 00b4 00000000 		.word	rec_data
 772 00b8 00000000 		.word	rec_data_size
 773              		.cfi_endproc
 774              	.LFE143:
 776              		.section	.text.Error_Handler,"ax",%progbits
 777              		.align	1
 778              		.global	Error_Handler
 779              		.syntax unified
 780              		.thumb
 781              		.thumb_func
 782              		.fpu fpv5-sp-d16
 784              	Error_Handler:
 785              	.LFB149:
 390:Src/main.c    **** /* USER CODE END 4 */
 391:Src/main.c    **** 
 392:Src/main.c    **** /**
 393:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 394:Src/main.c    ****   * @retval None
 395:Src/main.c    ****   */
 396:Src/main.c    **** void Error_Handler(void)
 397:Src/main.c    **** {
 786              		.loc 1 397 0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccZVPRyK.s 			page 23


 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              		@ link register save eliminated.
 791 0000 7047     		bx	lr
 792              		.cfi_endproc
 793              	.LFE149:
 795              		.comm	htim2,64,4
 796              		.section	.rodata
 797              		.align	2
 798              		.set	.LANCHOR0,. + 0
 799              	.LC2:
 800 0000 00       		.byte	0
 801 0001 5E       		.byte	94
 802 0002 BC       		.byte	-68
 803 0003 E2       		.byte	-30
 804 0004 61       		.byte	97
 805 0005 3F       		.byte	63
 806 0006 DD       		.byte	-35
 807 0007 83       		.byte	-125
 808 0008 C2       		.byte	-62
 809 0009 9C       		.byte	-100
 810 000a 7E       		.byte	126
 811 000b 20       		.byte	32
 812 000c A3       		.byte	-93
 813 000d FD       		.byte	-3
 814 000e 1F       		.byte	31
 815 000f 41       		.byte	65
 816 0010 9D       		.byte	-99
 817 0011 C3       		.byte	-61
 818 0012 21       		.byte	33
 819 0013 7F       		.byte	127
 820 0014 FC       		.byte	-4
 821 0015 A2       		.byte	-94
 822 0016 40       		.byte	64
 823 0017 1E       		.byte	30
 824 0018 5F       		.byte	95
 825 0019 01       		.byte	1
 826 001a E3       		.byte	-29
 827 001b BD       		.byte	-67
 828 001c 3E       		.byte	62
 829 001d 60       		.byte	96
 830 001e 82       		.byte	-126
 831 001f DC       		.byte	-36
 832 0020 23       		.byte	35
 833 0021 7D       		.byte	125
 834 0022 9F       		.byte	-97
 835 0023 C1       		.byte	-63
 836 0024 42       		.byte	66
 837 0025 1C       		.byte	28
 838 0026 FE       		.byte	-2
 839 0027 A0       		.byte	-96
 840 0028 E1       		.byte	-31
 841 0029 BF       		.byte	-65
 842 002a 5D       		.byte	93
 843 002b 03       		.byte	3
 844 002c 80       		.byte	-128
 845 002d DE       		.byte	-34
 846 002e 3C       		.byte	60
ARM GAS  /tmp/ccZVPRyK.s 			page 24


 847 002f 62       		.byte	98
 848 0030 BE       		.byte	-66
 849 0031 E0       		.byte	-32
 850 0032 02       		.byte	2
 851 0033 5C       		.byte	92
 852 0034 DF       		.byte	-33
 853 0035 81       		.byte	-127
 854 0036 63       		.byte	99
 855 0037 3D       		.byte	61
 856 0038 7C       		.byte	124
 857 0039 22       		.byte	34
 858 003a C0       		.byte	-64
 859 003b 9E       		.byte	-98
 860 003c 1D       		.byte	29
 861 003d 43       		.byte	67
 862 003e A1       		.byte	-95
 863 003f FF       		.byte	-1
 864 0040 46       		.byte	70
 865 0041 18       		.byte	24
 866 0042 FA       		.byte	-6
 867 0043 A4       		.byte	-92
 868 0044 27       		.byte	39
 869 0045 79       		.byte	121
 870 0046 9B       		.byte	-101
 871 0047 C5       		.byte	-59
 872 0048 84       		.byte	-124
 873 0049 DA       		.byte	-38
 874 004a 38       		.byte	56
 875 004b 66       		.byte	102
 876 004c E5       		.byte	-27
 877 004d BB       		.byte	-69
 878 004e 59       		.byte	89
 879 004f 07       		.byte	7
 880 0050 DB       		.byte	-37
 881 0051 85       		.byte	-123
 882 0052 67       		.byte	103
 883 0053 39       		.byte	57
 884 0054 BA       		.byte	-70
 885 0055 E4       		.byte	-28
 886 0056 06       		.byte	6
 887 0057 58       		.byte	88
 888 0058 19       		.byte	25
 889 0059 47       		.byte	71
 890 005a A5       		.byte	-91
 891 005b FB       		.byte	-5
 892 005c 78       		.byte	120
 893 005d 26       		.byte	38
 894 005e C4       		.byte	-60
 895 005f 9A       		.byte	-102
 896 0060 65       		.byte	101
 897 0061 3B       		.byte	59
 898 0062 D9       		.byte	-39
 899 0063 87       		.byte	-121
 900 0064 04       		.byte	4
 901 0065 5A       		.byte	90
 902 0066 B8       		.byte	-72
 903 0067 E6       		.byte	-26
ARM GAS  /tmp/ccZVPRyK.s 			page 25


 904 0068 A7       		.byte	-89
 905 0069 F9       		.byte	-7
 906 006a 1B       		.byte	27
 907 006b 45       		.byte	69
 908 006c C6       		.byte	-58
 909 006d 98       		.byte	-104
 910 006e 7A       		.byte	122
 911 006f 24       		.byte	36
 912 0070 F8       		.byte	-8
 913 0071 A6       		.byte	-90
 914 0072 44       		.byte	68
 915 0073 1A       		.byte	26
 916 0074 99       		.byte	-103
 917 0075 C7       		.byte	-57
 918 0076 25       		.byte	37
 919 0077 7B       		.byte	123
 920 0078 3A       		.byte	58
 921 0079 64       		.byte	100
 922 007a 86       		.byte	-122
 923 007b D8       		.byte	-40
 924 007c 5B       		.byte	91
 925 007d 05       		.byte	5
 926 007e E7       		.byte	-25
 927 007f B9       		.byte	-71
 928 0080 8C       		.byte	-116
 929 0081 D2       		.byte	-46
 930 0082 30       		.byte	48
 931 0083 6E       		.byte	110
 932 0084 ED       		.byte	-19
 933 0085 B3       		.byte	-77
 934 0086 51       		.byte	81
 935 0087 0F       		.byte	15
 936 0088 4E       		.byte	78
 937 0089 10       		.byte	16
 938 008a F2       		.byte	-14
 939 008b AC       		.byte	-84
 940 008c 2F       		.byte	47
 941 008d 71       		.byte	113
 942 008e 93       		.byte	-109
 943 008f CD       		.byte	-51
 944 0090 11       		.byte	17
 945 0091 4F       		.byte	79
 946 0092 AD       		.byte	-83
 947 0093 F3       		.byte	-13
 948 0094 70       		.byte	112
 949 0095 2E       		.byte	46
 950 0096 CC       		.byte	-52
 951 0097 92       		.byte	-110
 952 0098 D3       		.byte	-45
 953 0099 8D       		.byte	-115
 954 009a 6F       		.byte	111
 955 009b 31       		.byte	49
 956 009c B2       		.byte	-78
 957 009d EC       		.byte	-20
 958 009e 0E       		.byte	14
 959 009f 50       		.byte	80
 960 00a0 AF       		.byte	-81
ARM GAS  /tmp/ccZVPRyK.s 			page 26


 961 00a1 F1       		.byte	-15
 962 00a2 13       		.byte	19
 963 00a3 4D       		.byte	77
 964 00a4 CE       		.byte	-50
 965 00a5 90       		.byte	-112
 966 00a6 72       		.byte	114
 967 00a7 2C       		.byte	44
 968 00a8 6D       		.byte	109
 969 00a9 33       		.byte	51
 970 00aa D1       		.byte	-47
 971 00ab 8F       		.byte	-113
 972 00ac 0C       		.byte	12
 973 00ad 52       		.byte	82
 974 00ae B0       		.byte	-80
 975 00af EE       		.byte	-18
 976 00b0 32       		.byte	50
 977 00b1 6C       		.byte	108
 978 00b2 8E       		.byte	-114
 979 00b3 D0       		.byte	-48
 980 00b4 53       		.byte	83
 981 00b5 0D       		.byte	13
 982 00b6 EF       		.byte	-17
 983 00b7 B1       		.byte	-79
 984 00b8 F0       		.byte	-16
 985 00b9 AE       		.byte	-82
 986 00ba 4C       		.byte	76
 987 00bb 12       		.byte	18
 988 00bc 91       		.byte	-111
 989 00bd CF       		.byte	-49
 990 00be 2D       		.byte	45
 991 00bf 73       		.byte	115
 992 00c0 CA       		.byte	-54
 993 00c1 94       		.byte	-108
 994 00c2 76       		.byte	118
 995 00c3 28       		.byte	40
 996 00c4 AB       		.byte	-85
 997 00c5 F5       		.byte	-11
 998 00c6 17       		.byte	23
 999 00c7 49       		.byte	73
 1000 00c8 08       		.byte	8
 1001 00c9 56       		.byte	86
 1002 00ca B4       		.byte	-76
 1003 00cb EA       		.byte	-22
 1004 00cc 69       		.byte	105
 1005 00cd 37       		.byte	55
 1006 00ce D5       		.byte	-43
 1007 00cf 8B       		.byte	-117
 1008 00d0 57       		.byte	87
 1009 00d1 09       		.byte	9
 1010 00d2 EB       		.byte	-21
 1011 00d3 B5       		.byte	-75
 1012 00d4 36       		.byte	54
 1013 00d5 68       		.byte	104
 1014 00d6 8A       		.byte	-118
 1015 00d7 D4       		.byte	-44
 1016 00d8 95       		.byte	-107
 1017 00d9 CB       		.byte	-53
ARM GAS  /tmp/ccZVPRyK.s 			page 27


 1018 00da 29       		.byte	41
 1019 00db 77       		.byte	119
 1020 00dc F4       		.byte	-12
 1021 00dd AA       		.byte	-86
 1022 00de 48       		.byte	72
 1023 00df 16       		.byte	22
 1024 00e0 E9       		.byte	-23
 1025 00e1 B7       		.byte	-73
 1026 00e2 55       		.byte	85
 1027 00e3 0B       		.byte	11
 1028 00e4 88       		.byte	-120
 1029 00e5 D6       		.byte	-42
 1030 00e6 34       		.byte	52
 1031 00e7 6A       		.byte	106
 1032 00e8 2B       		.byte	43
 1033 00e9 75       		.byte	117
 1034 00ea 97       		.byte	-105
 1035 00eb C9       		.byte	-55
 1036 00ec 4A       		.byte	74
 1037 00ed 14       		.byte	20
 1038 00ee F6       		.byte	-10
 1039 00ef A8       		.byte	-88
 1040 00f0 74       		.byte	116
 1041 00f1 2A       		.byte	42
 1042 00f2 C8       		.byte	-56
 1043 00f3 96       		.byte	-106
 1044 00f4 15       		.byte	21
 1045 00f5 4B       		.byte	75
 1046 00f6 A9       		.byte	-87
 1047 00f7 F7       		.byte	-9
 1048 00f8 B6       		.byte	-74
 1049 00f9 E8       		.byte	-24
 1050 00fa 0A       		.byte	10
 1051 00fb 54       		.byte	84
 1052 00fc D7       		.byte	-41
 1053 00fd 89       		.byte	-119
 1054 00fe 6B       		.byte	107
 1055 00ff 35       		.byte	53
 1056              	.LC0:
 1057 0100 AA       		.byte	-86
 1058 0101 55       		.byte	85
 1059 0102 02       		.byte	2
 1060 0103 00       		.byte	0
 1061 0104 00       		.byte	0
 1062 0105 000000   		.space	3
 1063              	.LC1:
 1064 0108 AA       		.byte	-86
 1065 0109 55       		.byte	85
 1066 010a 02       		.byte	2
 1067 010b 00       		.byte	0
 1068              		.text
 1069              	.Letext0:
 1070              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1071              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1072              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 1073              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1074              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
ARM GAS  /tmp/ccZVPRyK.s 			page 28


 1075              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 1076              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1077              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc_ex.h"
 1078              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
 1079              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 1080              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 1081              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 1082              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 1083              		.file 15 "/usr/include/newlib/sys/lock.h"
 1084              		.file 16 "/usr/include/newlib/sys/_types.h"
 1085              		.file 17 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1086              		.file 18 "/usr/include/newlib/sys/reent.h"
 1087              		.file 19 "/usr/include/newlib/stdlib.h"
 1088              		.file 20 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 1089              		.file 21 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 1090              		.file 22 "Inc/usbd_cdc_if.h"
 1091              		.file 23 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim_ex.h"
 1092              		.file 24 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_pwr_ex.h"
 1093              		.file 25 "Inc/usb_device.h"
ARM GAS  /tmp/ccZVPRyK.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccZVPRyK.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccZVPRyK.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccZVPRyK.s:173    .text.MX_GPIO_Init:00000000000000d0 $d
     /tmp/ccZVPRyK.s:181    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccZVPRyK.s:187    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccZVPRyK.s:258    .text.MX_TIM2_Init:0000000000000054 $d
                            *COM*:0000000000000040 htim2
     /tmp/ccZVPRyK.s:263    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccZVPRyK.s:270    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccZVPRyK.s:302    .text.HAL_TIM_PeriodElapsedCallback:0000000000000018 $d
     /tmp/ccZVPRyK.s:307    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccZVPRyK.s:314    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccZVPRyK.s:436    .text.SystemClock_Config:00000000000000a8 $d
     /tmp/ccZVPRyK.s:442    .text.crc8_check:0000000000000000 $t
     /tmp/ccZVPRyK.s:449    .text.crc8_check:0000000000000000 crc8_check
     /tmp/ccZVPRyK.s:509    .text.crc8_check:0000000000000030 $d
     /tmp/ccZVPRyK.s:514    .text.recive_msg:0000000000000000 $t
     /tmp/ccZVPRyK.s:521    .text.recive_msg:0000000000000000 recive_msg
     /tmp/ccZVPRyK.s:630    .text.recive_msg:000000000000007c $d
     /tmp/ccZVPRyK.s:637    .text.main:0000000000000000 $t
     /tmp/ccZVPRyK.s:644    .text.main:0000000000000000 main
     /tmp/ccZVPRyK.s:769    .text.main:00000000000000ac $d
     /tmp/ccZVPRyK.s:777    .text.Error_Handler:0000000000000000 $t
     /tmp/ccZVPRyK.s:784    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccZVPRyK.s:797    .rodata:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_GPIO_TogglePin
memset
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
memcpy
rand
srand
HAL_Init
MX_USB_DEVICE_Init
HAL_TIM_Base_Start_IT
CDC_Transmit_FS
rec_data
rec_data_size
